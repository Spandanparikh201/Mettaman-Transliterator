document.addEventListener('DOMContentLoaded', function() {
    const compileBtn = document.getElementById('compile-btn');
    const codeInput = document.getElementById('code-input');
    const languageSelect = document.getElementById('language');
    
    const programOutput = document.getElementById('program-output');
    const ezhOutput = document.getElementById('ezh-output');
    const velthuisOutput = document.getElementById('velthuis-output');
    const transliteratedOutput = document.getElementById('transliterated-output');
    
    compileBtn.addEventListener('click', async function() {
        const code = codeInput.value;
        const language = languageSelect.value;
        
        if (!code.trim()) {
            alert('Please enter some code to compile!');
            return;
        }
        
        compileBtn.textContent = 'тП│ Compiling...';
        compileBtn.disabled = true;
        
        try {
            const response = await fetch('/api/compile', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    code: code,
                    language: language
                })
            });
            
            const result = await response.json();
            
            if (result.success) {
                programOutput.textContent = result.output;
                ezhOutput.textContent = result.ezh;
                velthuisOutput.textContent = result.velthuis;
                transliteratedOutput.textContent = result.transliterated;
            } else {
                alert('Compilation failed: ' + result.error);
            }
        } catch (error) {
            alert('Error: ' + error.message);
        } finally {
            compileBtn.textContent = 'ЁЯЪА Compile';
            compileBtn.disabled = false;
        }
    });
    
    const samples = {
        'ta': `роЕроЪрпНроЪро┐роЯрпБ "ро╡рогроХрпНроХроорпН роЙро▓роХроорпН"
роЖройро╛ро▓рпН x > 5:
    роЕроЪрпНроЪро┐роЯрпБ "рокрпЖро░ро┐роп роОрогрпН"
роЗро▓рпНро▓рпИ:
    роЕроЪрпНроЪро┐роЯрпБ "роЪро┐ро▒ро┐роп роОрогрпН"`,
        'hi': `рдЫрд╛рдкреЗрдВ "рдирдорд╕реНрддреЗ рджреБрдирд┐рдпрд╛"
рдЕрдЧрд░ x > 5:
    рдЫрд╛рдкреЗрдВ "рдмрдбрд╝реА рд╕рдВрдЦреНрдпрд╛"
рдирд╣реАрдВ_рддреЛ:
    рдЫрд╛рдкреЗрдВ "рдЫреЛрдЯреА рд╕рдВрдЦреНрдпрд╛"`,
        'te': `р░ор▒Бр░жр▒Нр░░р░┐р░Вр░Ър▒Б "р░ир░ор░╕р▒Нр░Хр░╛р░░р░В р░кр▒Нр░░р░кр░Вр░Ър░В"
р░Ер░пр░┐р░др▒З x > 5:
    р░ор▒Бр░жр▒Нр░░р░┐р░Вр░Ър▒Б "р░кр▒Жр░жр▒Нр░ж р░╕р░Вр░Цр▒Нр░п"
р░▓р▒Зр░Хр░кр▒Лр░др▒З:
    р░ор▒Бр░жр▒Нр░░р░┐р░Вр░Ър▒Б "р░Ър░┐р░ир▒Нр░и р░╕р░Вр░Цр▒Нр░п"`,
        'gu': `ркЫрк╛рккрлЛ "ркиркорк╕рлНркдрлЗ ркжрлБркирк┐ркпрк╛"
ркЬрлЛ x > 5:
    ркЫрк╛рккрлЛ "ркорлЛркЯрлА рк╕ркВркЦрлНркпрк╛"
ркирк╣рлАркВ_ркдрлЛ:
    ркЫрк╛рккрлЛ "ркирк╛ркирлА рк╕ркВркЦрлНркпрк╛"`
    };
    
    languageSelect.addEventListener('change', function() {
        const lang = this.value;
        if (samples[lang]) {
            codeInput.value = samples[lang];
        }
    });
});