let pyodide;

async function initPyodide() {
    pyodide = await loadPyodide();
    await pyodide.loadPackage(['micropip']);
    
    // Load compiler code
    pyodide.runPython(`
STATEMENT_MAPPINGS = {
    'ta': {
        '‡ÆÖ‡Æö‡Øç‡Æö‡Æø‡Æü‡ØÅ': 'print', '‡ÆÜ‡Æ©‡Ææ‡Æ≤‡Øç': 'if', '‡Æá‡Æ≤‡Øç‡Æ≤‡Øà': 'else', '‡Æµ‡Æ∞‡Øà': 'while',
        '‡Æâ‡Æ≥‡Øç‡Æ≥‡Øá': 'for', '‡Æö‡ØÜ‡ÆØ‡Æ≤‡Øç‡Æ™‡Ææ‡Æü‡ØÅ': 'def', '‡Æ§‡Æø‡Æ∞‡ØÅ‡ÆÆ‡Øç‡Æ™‡ØÅ': 'return'
    },
    'hi': {
        '‡§õ‡§æ‡§™‡•á‡§Ç': 'print', '‡§Ö‡§ó‡§∞': 'if', '‡§®‡§π‡•Ä‡§Ç_‡§§‡•ã': 'else', '‡§ú‡§¨_‡§§‡§ï': 'while',
        '‡§ï‡•á_‡§≤‡§ø‡§è': 'for', '‡§ï‡§æ‡§∞‡•ç‡§Ø': 'def', '‡§µ‡§æ‡§™‡§∏': 'return'
    },
    'te': {
        '‡∞Æ‡±Å‡∞¶‡±ç‡∞∞‡∞ø‡∞Ç‡∞ö‡±Å': 'print', '‡∞Ö‡∞Ø‡∞ø‡∞§‡±á': 'if', '‡∞≤‡±á‡∞ï‡∞™‡±ã‡∞§‡±á': 'else', '‡∞µ‡∞∞‡∞ï‡±Å': 'while',
        '‡∞ï‡±ã‡∞∏‡∞Ç': 'for', '‡∞ï‡∞æ‡∞∞‡±ç‡∞Ø‡∞Ç': 'def', '‡∞§‡∞ø‡∞∞‡∞ø‡∞ó‡∞ø': 'return'
    }
}

def get_char_mapping(lang_code):
    mappings = {
        'ta': {
            '‡∞Ö': 'a', '‡ÆÜ': 'aa', '‡Æá': 'i', '‡Æà': 'ii', '‡Æâ': 'u', '‡Æä': 'uu', '‡Æµ': 'va', '‡Æ£': '.n', '‡Æï': 'ka', '‡ÆÆ': 'ma', '‡Æ≤': 'la', '‡Æô': 'Ga', '‡Æ™': 'pa', '‡Æ∞': 'ra', '‡ÆØ': 'ya', '‡Æ§': 'ta', '‡Æ©': 'na', '‡ØÜ': 'e', '‡Æø': 'i', '‡Øç': '', '‡ØÅ': 'u', '‡Ææ': 'aa', '‡Øá': 'ee', '‡Øà': 'ai', '‡Øã': 'o', '‡Øå': 'au'
        },
        'hi': {
            '‡§Ö': 'a', '‡§Ü': 'aa', '‡§á': 'i', '‡§à': 'ii', '‡§â': 'u', '‡§ä': 'uu', '‡§®': 'na', '‡§Æ': 'ma', '‡§∏': 'sa', '‡§§': 'ta', '‡•á': 'e', '‡§Ç': 'M', '‡§¶': 'da', '‡•Å': 'u', '‡§ø': 'i', '‡§Ø': 'ya', '‡§æ': 'aa', '‡§∞': 'ra', '‡§≤': 'la', '‡§ï': 'ka', '‡§ó': 'ga', '‡§™': 'pa', '‡§¨': 'ba', '‡§õ': 'cha', '‡§ü': '.ta', '‡§°': '.da', '‡§£': '.na', '‡•à': 'ai', '‡•ã': 'o', '‡•å': 'au', '‡•ç': ''
        },
        'te': {
            '‡∞Ö': 'a', '‡∞Ü': 'aa', '‡∞á': 'i', '‡∞à': 'ii', '‡∞â': 'u', '‡∞ä': 'uu', '‡∞®': 'na', '‡∞Æ': 'ma', '‡∞∏': 'sa', '‡∞§': 'ta', '‡±á': 'e', '‡∞Ç': 'M', '‡∞¶': 'da', '‡±Å': 'u', '‡∞ø': 'i', '‡∞Ø': 'ya', '‡∞æ': 'aa', '‡∞∞': 'ra', '‡∞≤': 'la', '‡∞ï': 'ka', '‡∞ó': 'ga', '‡∞™': 'pa', '‡∞¨': 'ba', '‡∞ö': 'cha', '‡∞ü': '.ta', '‡∞°': '.da', '‡∞£': '.na', '‡±à': 'ai', '‡±ä': 'o', '‡±å': 'au', '‡±ç': ''
        }
    }
    return mappings.get(lang_code, {})

def convert_statements_to_english(content, lang_code):
    if (lang_code in STATEMENT_MAPPINGS) {
        const statement_map = STATEMENT_MAPPINGS[lang_code];
        for (const [indic_stmt, eng_stmt] of Object.entries(statement_map)) {
            content = content.replaceAll(indic_stmt, eng_stmt);
        }
    }
    return content;
}

def compile_indic(content, lang_code):
    content = convert_statements_to_english(content, lang_code)
    char_map = get_char_mapping(lang_code)
    result = ""
    for char in content:
        result += char_map.get(char, char)
    return result

def convert_to_ezh(content):
    replacements = {
        'print': 'piriNTu', 'if': 'aaNaal', 'else': 'illai eNil',
        'while': 'vare', 'for': 'ullE', 'def': 'niyam', 'return': 'pirivu'
    }
    for eng, ezh in replacements.items():
        content = content.replace(eng, ezh)
    return content
    `);
}

document.addEventListener('DOMContentLoaded', async function() {
    await initPyodide();
    
    const compileBtn = document.getElementById('compile-btn');
    const codeInput = document.getElementById('code-input');
    const languageSelect = document.getElementById('language');
    
    const velthuisOutput = document.getElementById('velthuis-output');
    const transliteratedOutput = document.getElementById('transliterated-output');
    const ezhOutput = document.getElementById('ezh-output');
    
    compileBtn.addEventListener('click', function() {
        const code = codeInput.value;
        const language = languageSelect.value;
        
        if (!code.trim()) {
            alert('Please enter some code to compile!');
            return;
        }
        
        compileBtn.textContent = '‚è≥ Compiling...';
        compileBtn.disabled = true;
        
        try {
            // Stage 1: Compile to Velthuis
            pyodide.globals.set('input_code', code);
            pyodide.globals.set('lang_code', language);
            
            const velthuis = pyodide.runPython(`compile_indic(input_code, lang_code)`);
            velthuisOutput.textContent = velthuis;
            
            // Stage 2: Transliterated (simplified - same as velthuis for demo)
            transliteratedOutput.textContent = velthuis;
            
            // Stage 3: Convert to Ezhil
            pyodide.globals.set('velthuis_content', velthuis);
            const ezh = pyodide.runPython(`convert_to_ezh(velthuis_content)`);
            ezhOutput.textContent = ezh;
            
        } catch (error) {
            alert('Compilation failed: ' + error.message);
        } finally {
            compileBtn.textContent = 'üöÄ Compile';
            compileBtn.disabled = false;
        }
    });
    
    // Sample code for different languages
    const samples = {
        'ta': `print "‡Æµ‡Æ£‡Æï‡Øç‡Æï‡ÆÆ‡Øç ‡Æâ‡Æ≤‡Æï‡ÆÆ‡Øç"
if x > 5:
    print "‡Æ™‡ØÜ‡Æ∞‡Æø‡ÆØ ‡Æé‡Æ£‡Øç"
else:
    print "‡Æö‡Æø‡Æ±‡Æø‡ÆØ ‡Æé‡Æ£‡Øç"`,
        'hi': `print "‡§®‡§Æ‡§∏‡•ç‡§§‡•á ‡§¶‡•Å‡§®‡§ø‡§Ø‡§æ"
if x > 5:
    print "‡§¨‡§°‡§º‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ"
else:
    print "‡§õ‡•ã‡§ü‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ"`,
        'te': `print "‡∞®‡∞Æ‡∞∏‡±ç‡∞ï‡∞æ‡∞∞‡∞Ç ‡∞™‡±ç‡∞∞‡∞™‡∞Ç‡∞ö‡∞Ç"
if x > 5:
    print "‡∞™‡±Ü‡∞¶‡±ç‡∞¶ ‡∞∏‡∞Ç‡∞ñ‡±ç‡∞Ø"
else:
    print "‡∞ö‡∞ø‡∞®‡±ç‡∞® ‡∞∏‡∞Ç‡∞ñ‡±ç‡∞Ø"`
    };
    
    languageSelect.addEventListener('change', function() {
        const lang = this.value;
        if (samples[lang]) {
            codeInput.value = samples[lang];
        }
    });
});