const STATEMENT_MAPPINGS = {
    'ta': {
        'роЕроЪрпНроЪро┐роЯрпБ': 'print', 'роЖройро╛ро▓рпН': 'if', 'роЗро▓рпНро▓рпИ': 'else', 'ро╡ро░рпИ': 'while',
        'роЙро│рпНро│рпЗ': 'for', 'роЪрпЖропро▓рпНрокро╛роЯрпБ': 'def', 'родро┐ро░рпБроорпНрокрпБ': 'return'
    },
    'hi': {
        'рдЫрд╛рдкреЗрдВ': 'print', 'рдЕрдЧрд░': 'if', 'рдирд╣реАрдВ_рддреЛ': 'else', 'рдЬрдм_рддрдХ': 'while',
        'рдХреЗ_рд▓рд┐рдП': 'for', 'рдХрд╛рд░реНрдп': 'def', 'рд╡рд╛рдкрд╕': 'return'
    },
    'te': {
        'р░ор▒Бр░жр▒Нр░░р░┐р░Вр░Ър▒Б': 'print', 'р░Ер░пр░┐р░др▒З': 'if', 'р░▓р▒Зр░Хр░кр▒Лр░др▒З': 'else', 'р░╡р░░р░Хр▒Б': 'while',
        'р░Хр▒Лр░╕р░В': 'for', 'р░Хр░╛р░░р▒Нр░пр░В': 'def', 'р░др░┐р░░р░┐р░Чр░┐': 'return'
    },
    'gu': {
        'ркЫрк╛рккрлЛ': 'print', 'ркЬрлЛ': 'if', 'ркирк╣рлАркВ_ркдрлЛ': 'else', 'ркЬрлНркпрк╛ркВ_рк╕рлБркзрлА': 'while',
        'ркорк╛ркЯрлЗ': 'for', 'ркХрк╛рк░рлНркп': 'def', 'рккрк╛ркЫрк╛': 'return'
    }
};

function get_char_mapping(lang_code) {
    const mappings = {
        'ta': {
            'роЕ': 'a', 'роЖ': 'aa', 'роЗ': 'i', 'роИ': 'ii', 'роЙ': 'u', 'роК': 'uu', 'ро╡': 'va', 'рог': '.n', 'роХ': 'ka', 'роо': 'ma', 'ро▓': 'la', 'роЩ': 'Ga', 'рок': 'pa', 'ро░': 'ra', 'роп': 'ya', 'род': 'ta', 'рой': 'na', 'рпЖ': 'e', 'ро┐': 'i', 'рпН': '', 'рпБ': 'u', 'ро╛': 'aa', 'рпЗ': 'ee', 'рпИ': 'ai', 'рпЛ': 'o', 'рпМ': 'au'
        },
        'hi': {
            'рдЕ': 'a', 'рдЖ': 'aa', 'рдЗ': 'i', 'рдИ': 'ii', 'рдЙ': 'u', 'рдК': 'uu', 'рди': 'na', 'рдо': 'ma', 'рд╕': 'sa', 'рдд': 'ta', 'реЗ': 'e', 'рдВ': 'M', 'рдж': 'da', 'реБ': 'u', 'рд┐': 'i', 'рдп': 'ya', 'рд╛': 'aa', 'рд░': 'ra', 'рд▓': 'la', 'рдХ': 'ka', 'рдЧ': 'ga', 'рдк': 'pa', 'рдм': 'ba', 'рдЫ': 'cha', 'рдЯ': '.ta', 'рдб': '.da', 'рдг': '.na', 'реИ': 'ai', 'реЛ': 'o', 'реМ': 'au', 'реН': ''
        },
        'te': {
            'р░Е': 'a', 'р░Ж': 'aa', 'р░З': 'i', 'р░И': 'ii', 'р░Й': 'u', 'р░К': 'uu', 'р░и': 'na', 'р░о': 'ma', 'р░╕': 'sa', 'р░д': 'ta', 'р▒З': 'e', 'р░В': 'M', 'р░ж': 'da', 'р▒Б': 'u', 'р░┐': 'i', 'р░п': 'ya', 'р░╛': 'aa', 'р░░': 'ra', 'р░▓': 'la', 'р░Х': 'ka', 'р░Ч': 'ga', 'р░к': 'pa', 'р░м': 'ba', 'р░Ъ': 'cha', 'р░Я': '.ta', 'р░б': '.da', 'р░г': '.na', 'р▒И': 'ai', 'р▒К': 'o', 'р▒М': 'au', 'р▒Н': ''
        },
        'gu': {
            'ркЕ': 'a', 'ркЖ': 'aa', 'ркЗ': 'i', 'ркИ': 'ii', 'ркЙ': 'u', 'ркК': 'uu', 'рки': 'na', 'рко': 'ma', 'рк╕': 'sa', 'ркд': 'ta', 'рлЗ': 'e', 'ркВ': 'M', 'ркж': 'da', 'рлБ': 'u', 'рк┐': 'i', 'ркп': 'ya', 'рк╛': 'aa', 'рк░': 'ra', 'рк▓': 'la', 'ркХ': 'ka', 'ркЧ': 'ga', 'ркк': 'pa', 'ркм': 'ba', 'ркЫ': 'cha', 'ркЯ': '.ta', 'ркб': '.da', 'ркг': '.na', 'рлИ': 'ai', 'рлЛ': 'o', 'рлМ': 'au', 'рлН': ''
        }
    };
    return mappings[lang_code] || {};
}

function convert_statements_to_english(content, lang_code) {
    if (lang_code in STATEMENT_MAPPINGS) {
        const statement_map = STATEMENT_MAPPINGS[lang_code];
        for (const [indic_stmt, eng_stmt] of Object.entries(statement_map)) {
            content = content.replaceAll(indic_stmt, eng_stmt);
        }
    }
    return content;
}

function compile_indic(content, lang_code) {
    content = convert_statements_to_english(content, lang_code);
    const char_map = get_char_mapping(lang_code);
    let result = "";
    for (const char of content) {
        result += char_map[char] || char;
    }
    return result;
}

function convert_to_ezh(content) {
    const replacements = {
        'print': 'piriNTu', 'if': 'aaNaal', 'else': 'illai eNil',
        'while': 'vare', 'for': 'ullE', 'def': 'niyam', 'return': 'pirivu'
    };
    for (const [eng, ezh] of Object.entries(replacements)) {
        content = content.replaceAll(eng, ezh);
    }
    return content;
}

document.addEventListener('DOMContentLoaded', function() {
    const compileBtn = document.getElementById('compile-btn');
    const codeInput = document.getElementById('code-input');
    const languageSelect = document.getElementById('language');
    
    const velthuisOutput = document.getElementById('velthuis-output');
    const transliteratedOutput = document.getElementById('transliterated-output');
    const ezhOutput = document.getElementById('ezh-output');
    
    compileBtn.addEventListener('click', function() {
        const code = codeInput.value;
        const language = languageSelect.value;
        
        if (!code.trim()) {
            alert('Please enter some code to compile!');
            return;
        }
        
        compileBtn.textContent = 'тП│ Compiling...';
        compileBtn.disabled = true;
        
        try {
            const velthuis = compile_indic(code, language);
            velthuisOutput.textContent = velthuis;
            
            transliteratedOutput.textContent = velthuis;
            
            const ezh = convert_to_ezh(velthuis);
            ezhOutput.textContent = ezh;
            
        } catch (error) {
            alert('Compilation failed: ' + error.message);
        } finally {
            compileBtn.textContent = 'ЁЯЪА Compile';
            compileBtn.disabled = false;
        }
    });
    
    const samples = {
        'ta': `роЕроЪрпНроЪро┐роЯрпБ "ро╡рогроХрпНроХроорпН роЙро▓роХроорпН"
роЖройро╛ро▓рпН x > 5:
    роЕроЪрпНроЪро┐роЯрпБ "рокрпЖро░ро┐роп роОрогрпН"
роЗро▓рпНро▓рпИ:
    роЕроЪрпНроЪро┐роЯрпБ "роЪро┐ро▒ро┐роп роОрогрпН"`,
        'hi': `рдЫрд╛рдкреЗрдВ "рдирдорд╕реНрддреЗ рджреБрдирд┐рдпрд╛"
рдЕрдЧрд░ x > 5:
    рдЫрд╛рдкреЗрдВ "рдмрдбрд╝реА рд╕рдВрдЦреНрдпрд╛"
рдирд╣реАрдВ_рддреЛ:
    рдЫрд╛рдкреЗрдВ "рдЫреЛрдЯреА рд╕рдВрдЦреНрдпрд╛"`,
        'te': `р░ор▒Бр░жр▒Нр░░р░┐р░Вр░Ър▒Б "р░ир░ор░╕р▒Нр░Хр░╛р░░р░В р░кр▒Нр░░р░кр░Вр░Ър░В"
р░Ер░пр░┐р░др▒З x > 5:
    р░ор▒Бр░жр▒Нр░░р░┐р░Вр░Ър▒Б "р░кр▒Жр░жр▒Нр░ж р░╕р░Вр░Цр▒Нр░п"
р░▓р▒Зр░Хр░кр▒Лр░др▒З:
    р░ор▒Бр░жр▒Нр░░р░┐р░Вр░Ър▒Б "р░Ър░┐р░ир▒Нр░и р░╕р░Вр░Цр▒Нр░п"`,
        'gu': `ркЫрк╛рккрлЛ "ркиркорк╕рлНркдрлЗ ркжрлБркирк┐ркпрк╛"
ркЬрлЛ x > 5:
    ркЫрк╛рккрлЛ "ркорлЛркЯрлА рк╕ркВркЦрлНркпрк╛"
ркирк╣рлАркВ_ркдрлЛ:
    ркЫрк╛рккрлЛ "ркирк╛ркирлА рк╕ркВркЦрлНркпрк╛"`
    };
    
    languageSelect.addEventListener('change', function() {
        const lang = this.value;
        if (samples[lang]) {
            codeInput.value = samples[lang];
        }
    });
});